n1_train <- n0_train <- n_train <- 60
n0_test <- n1_test <- 300
x0_all = rmvt(n = n0_all, sigma = covxx, delta = rep(0, d), df = df)
x1_all = rmvt(n = n1_all, sigma = covxx, delta = delta, df = df)
x_data = rbind(x0_all, x1_all)
y_data = c(rep(0, n0_all), rep(1, n1_all))
id0 <- which(y_data == 0)
id1 <- which(y_data == 1)
id0_train <- sample(id0, n0_train)
id1_train <- sample(id1, n1_train)
id_train <- c(id0_train, id1_train)
x_train <- as.matrix(x_data[id_train, ])
y_train <- as.matrix(y_data[id_train])
id0_remain = setdiff(id0, id0_train)
id1_remain = setdiff(id1, id1_train)
id0_test <- sample(id0_remain, n0_test)
id1_test <- sample(id1_remain, n1_test)
id_test <- c(id0_test, id1_test)
x_test <- as.matrix(x_data[id_test, ])
data_list = pilot_pca2(x_train, y_train, x_test)
calculate_AUCs(n01_all = c(800, 800), n01_p = c(15, 15),
n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120,
120), c(150, 150)), n01_test = c(300, 300), num_of_seeds = 20,
random_seeds = FALSE, calculate_std_of_AUC_and_produce_plot = TRUE,
data_generation = list(dist = "t-distribution", sigma = list(class_0 = diag(5),
class_1 = diag(5)), df = c(10, 10), delta = c(rep(0,
5), rep(2, 5))), true_data_to_compare = 1)
AUC = calculate_AUC_base(n01_all = c(800, 800), n01_p = c(15, 15), n01_test = c(300,
300), n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120, 120), c(150, 150)),
seed = 1, model = c("svm", "randomforest"))
library(SSD)
AUC = calculate_AUC_base(n01_all = c(800, 800), n01_p = c(15, 15), n01_test = c(300,
300), n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120, 120), c(150, 150)),
seed = 1, model = c("svm", "randomforest"))
library(SSD)
AUC = calculate_AUC_base(n01_all = c(800, 800), n01_p = c(15, 15), n01_test = c(300,
300), n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120, 120), c(150, 150)),
seed = 1, model = c("svm", "randomforest"))
AUC = calculate_AUC_base(n01_all = c(800, 800), n01_p = c(15, 15), n01_test = c(300,
300), n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120, 120), c(150, 150)),
seed = 1, model = c("svm", "randomforest"), method="gaussian_copula")
library(SSD)
AUC = calculate_AUC_base(n01_all = c(800, 800), n01_p = c(15, 15), n01_test = c(300,
300), n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120, 120), c(150, 150)),
seed = 1, model = c("svm", "randomforest"), method="smote")
library(SSD)
AUC = calculate_AUC_base(n01_all = c(800, 800), n01_p = c(15, 15), n01_test = c(300,
300), n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120, 120), c(150, 150)),
seed = 1, model = c("svm", "randomforest"), method="smote")
AUC
AUC = calculate_AUC_base(n01_all = c(800, 800), n01_p = c(15, 15), n01_test = c(300,
300), n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120, 120), c(150, 150)),
seed = 1, model = c("svm", "randomforest"), method="gaussian_copula")
AUC = calculate_AUC_base(n01_all = c(800, 800), n01_p = c(15, 15), n01_test = c(300,
300), n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120, 120), c(150, 150)),
seed = 1, model = c("svm", "randomforest"), method="scDesign2")
library(SSD)
data_mat <- readRDS(system.file("extdata", "mouse_sie_10x.rds", package = "scDesign2"))
nonspikes <- which(!grepl("ercc", rownames(data_mat), ignore.case = TRUE))
data_mat <- data_mat[nonspikes, , drop = FALSE]
dim(data_mat)
table(colnames(data_mat))
needed_cell_type <- c("Enterocyte.Progenitor.Early", "Stem")
set.seed(1)
all_idx <- unlist(sapply(needed_cell_type, function(x) {
cell_type_idx <- which(colnames(data_mat) == x)
n_cell_total <- length(cell_type_idx)
sample(cell_type_idx, 800)
}))
allcount <- data_mat[, all_idx]
x_data = t(allcount)
y_data = c(rep(0, 800), rep(1, 800))
data = list(x_data = x_data, y_data = y_data)
pilot_rest_data = split_data(data$x_data, data$y_data, n_train = 15, seed = 1)
data_list = pilot_tfe_scDesign2(pilot_rest_data$x_train, pilot_rest_data$y_train,
n0_train = 60, n1_train = 60, n0_test = 300, n1_test = 300)
Sys.time()
data_list = pilot_tfe_scDesign2(pilot_rest_data$x_train, pilot_rest_data$y_train,
n0_train = 60, n1_train = 60, n0_test = 300, n1_test = 300)
Sys.time()
size(a)
length(data_list$train_x)
data_list = pilot_tfe_scDesign2(pilot_rest_data$x_train, pilot_rest_data$y_train,
n0_train = 60, n1_train = 60, n0_test = 300, n1_test = 300)
AUC = calculate_AUC_base(n01_all = c(800, 800), n01_p = c(15, 15), n01_test = c(300,
300), n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120, 120), c(150, 150)),
seed = 1, model = c("svm", "randomforest"))
n01_all= c(800,800)
n01_p=c(15,15)
n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150))
n01_test=c(300,300)
seed=1
method="pca2_mvnorm"
model=c("svm","randomforest")
func=NULL
data_generation=list(dist="t-distribution",sigma=list(class_0=diag(5),class_1=diag(5)),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
#data_input=NULL
true_data_to_compare=1
n_train_sets
library(PRROC)
n0_p <- n01_p[1]
n1_p <- n01_p[2]
n_p=n0_p+n1_p
n0_test <- n01_test[1]
n1_test <- n01_test[2]
n_test = n0_test + n1_test
if(is.null(data_input)){
data = generate_data(seed=seed, n01_all=n01_all, data_generation=data_generation)
}else{
data = data_input
if(true_data_to_compare==1){
if(n01_p[1]+n_train_sets[length(n_train_sets)-1]+n01_test[1] > sum(data$y_data==0)){
stop('error: there are not sufficient class 0 input data to run the simulations! Please adjust the parameters.')
}
if(n01_p[2]+n_train_sets[length(n_train_sets)]+n01_test[2] > sum(data$y_data==1)){
stop('error: there are not sufficient class 1 input data to run the simulations! Please adjust the parameters.')
}
}
}
data_input=NULL
if(is.null(data_input)){
data = generate_data(seed=seed, n01_all=n01_all, data_generation=data_generation)
}else{
data = data_input
if(true_data_to_compare==1){
if(n01_p[1]+n_train_sets[length(n_train_sets)-1]+n01_test[1] > sum(data$y_data==0)){
stop('error: there are not sufficient class 0 input data to run the simulations! Please adjust the parameters.')
}
if(n01_p[2]+n_train_sets[length(n_train_sets)]+n01_test[2] > sum(data$y_data==1)){
stop('error: there are not sufficient class 1 input data to run the simulations! Please adjust the parameters.')
}
}
}
pilot_rest_data = split_data(data$x_data, data$y_data, n_train=n_p, seed=seed)
test_y=c(rep(0,n0_test),rep(1,n1_test))
Loop=100
num_of_model = length(model)
number_of_train_sets = length(n_train_sets)/2
dim(n_train_sets) = c(2,number_of_train_sets)
if(true_data_to_compare==0){
auc = array(0,dim=c(length(n_train_sets)/2,Loop,num_of_model))
}else{
auc = array(0,dim=c(length(n_train_sets),Loop,num_of_model))
}
count = 1
n_train_sets
n_train_sets[1,]
max(n_train_sets[1,])
is.null(n0_test)
!is.null(n0_test)
library(SSD)
data = generate_data(n01_all = c(800, 800))
data_split1 = split_data(data$x_data, data$y_data, n0_train = 500, n1_train = 500,
seed = 1)
data_split2 = split_data(data$x_data, data$y_data, n0_train = 500, n1_train = 500,
n0_test = 200, n1_test = 200, seed = 1)
data_split3 = split_data(data$x_data, data$y_data, n0_train = 500, n1_train = 500,
n0_test = 200, n1_test = NULL, seed = 1)
library(mvtnorm)
library(MASS)
df = 10
rho = 0.5
d = 5
delta = rep(2, d)
H <- abs(outer(1:d, 1:d, "-"))
covxx = rho^H
n1_all <- n0_all <- 800
n1_p <- n0_p <- 15
x0_all = rmvt(n = n0_all, sigma = covxx, delta = rep(0, d), df = df)
x1_all = rmvt(n = n1_all, sigma = covxx, delta = delta, df = df)
x_data = rbind(x0_all, x1_all)
y_data = c(rep(0, n0_all), rep(1, n1_all))
id0 <- which(y_data == 0)
id1 <- which(y_data == 1)
id0_p <- sample(id0, n0_p)
id1_p <- sample(id1, n1_p)
id_p <- c(id0_p, id1_p)
x_pilot <- as.matrix(x_data[id_p, ])
y_pilot <- as.matrix(y_data[id_p])
n1_train <- n0_train <- n_train <- 60
n0_test <- n1_test <- 300
data_list = pilot_tfe_mvnorm_pca2(x_pilot, y_pilot, n0_train, n1_train, n0_test,
n1_test)
x_train = data_list$train_x
y_train = data_list$train_y
x_test = data_list$test_x
id0 <- which(y_train==0)
id1 <- which(y_train==1)
n0 = length(id0)
n1 = length(id1)
x_train
id0
n0_train=30
n1_train=30
if(!is.null(seed)){
set.seed(seed)
}
if(n0_train > n0 || n1_train > n1){
stop('downsample data error: input training data in the data list are not sufficient to downsample!')
}
id0_ds <- sample(id0,n0_train)
id1_ds <- sample(id1,n1_train)
id_ds <- c(id0_train,id1_train)
id_ds <- c(id0_ds,id1_ds)
id0_ds
id0_ds <- sample(id0,60)
id0_ds
id0_ds <- sample(id0,61)
x_train[id_ds,]
id_ds
length(id_ds)
x_train[id_ds,]
train_x <- as.data.frame(x_train[id_ds,])
View(train_x)
View(train_x)
mode(y_train)
train_y <- y_train[id_ds,]
train_y <- y_train[id_ds]
train_y
train_x <- x_train[id_ds,]
train_y <- y_train[id_ds]
mode(train_x)
train_x <- as.data.frame(x_train[id_ds,])
mode(train_x)
library(SSD)
library(mvtnorm)
library(MASS)
df = 10
rho = 0.5
d = 5
delta = rep(2, d)
H <- abs(outer(1:d, 1:d, "-"))
covxx = rho^H
n1_all <- n0_all <- 800
n1_p <- n0_p <- 15
x0_all = rmvt(n = n0_all, sigma = covxx, delta = rep(0, d), df = df)
x1_all = rmvt(n = n1_all, sigma = covxx, delta = delta, df = df)
x_data = rbind(x0_all, x1_all)
y_data = c(rep(0, n0_all), rep(1, n1_all))
id0 <- which(y_data == 0)
id1 <- which(y_data == 1)
id0_p <- sample(id0, n0_p)
id1_p <- sample(id1, n1_p)
id_p <- c(id0_p, id1_p)
x_pilot <- as.matrix(x_data[id_p, ])
y_pilot <- as.matrix(y_data[id_p])
n1_train <- n0_train <- n_train <- 150
n0_test <- n1_test <- 300
data_list = pilot_tfe_mvnorm_pca2(x_pilot, y_pilot, n0_train, n1_train, n0_test,
n1_test)
library(mvtnorm)
library(MASS)
df = 10
rho = 0.5
d = 5
delta = rep(2, d)
H <- abs(outer(1:d, 1:d, "-"))
covxx = rho^H
n1_all <- n0_all <- 800
n1_p <- n0_p <- 15
x0_all = rmvt(n = n0_all, sigma = covxx, delta = rep(0, d), df = df)
x1_all = rmvt(n = n1_all, sigma = covxx, delta = delta, df = df)
x_data = rbind(x0_all, x1_all)
y_data = c(rep(0, n0_all), rep(1, n1_all))
id0 <- which(y_data == 0)
id1 <- which(y_data == 1)
id0_p <- sample(id0, n0_p)
id1_p <- sample(id1, n1_p)
id_p <- c(id0_p, id1_p)
x_pilot <- as.matrix(x_data[id_p, ])
y_pilot <- as.matrix(y_data[id_p])
n1_train <- n0_train <- n_train <- 150
n0_test <- n1_test <- 300
data_list = pilot_tfe_mvnorm_pca2(x_pilot, y_pilot, n0_train, n1_train, n0_test,
n1_test)
data_list_ds = downsample_data(data_list, n0_train = 30, n1_train = 30, seed = 1)
result = get_p_result(data_list, model = c("svm", "randomforest"))
View(result)
View(result)
number_of_train_sets
library(SSD)
AUC = calculate_AUC_base(n01_all = c(800, 800), n01_p = c(15, 15), n01_test = c(300,
300), n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120, 120), c(150, 150)),
seed = 1, model = c("svm", "randomforest"), true_data_to_compare=0)
library(SSD)
AUC = calculate_AUC_base(n01_all = c(800, 800), n01_p = c(15, 15), n01_test = c(300,
300), n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120, 120), c(150, 150)),
seed = 1, model = c("svm", "randomforest"), true_data_to_compare=0)
library(SSD)
AUC = calculate_AUC_base(n01_all = c(800, 800), n01_p = c(15, 15), n01_test = c(300,
300), n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120, 120), c(150, 150)),
seed = 1, model = c("svm", "randomforest"))
Sys.time()
calculate_AUCs(n01_all = c(800, 800), n01_p = c(15, 15),
n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120,
120), c(150, 150)), n01_test = c(300, 300), num_of_seeds = 20,
random_seeds = FALSE, calculate_std_of_AUC_and_produce_plot = TRUE,
data_generation = list(dist = "t-distribution", sigma = list(class_0 = diag(5),
class_1 = diag(5)), df = c(10, 10), delta = c(rep(0,
5), rep(2, 5))), true_data_to_compare = 1)
Sys.time()
result = calculate_AUCs(n01_all = c(800, 800), n01_p = c(15, 15),
n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120,
120), c(150, 150)), n01_test = c(300, 300), num_of_seeds = 20,
random_seeds = FALSE, calculate_std_of_AUC_and_produce_plot = TRUE,
data_generation = list(dist = "t-distribution", sigma = list(class_0 = diag(5),
class_1 = diag(5)), df = c(10, 10), delta = c(rep(0,
5), rep(2, 5))), true_data_to_compare = 1)
AUC = calculate_AUC_base(n01_all = c(800, 800), n01_p = c(15, 15), n01_test = c(300,
300), n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120, 120), c(150, 150)),
seed = 1, model = c("svm", "randomforest"))
AUC
n01_all= c(800,800)
n01_p=c(15,15)
n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150))
n01_test=c(300,300)
seed=1
method="pca2_mvnorm"
model=c("svm","randomforest")
func=NULL
data_generation=list(dist="t-distribution",sigma=list(class_0=diag(5),class_1=diag(5)),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
#data_input=NULL
true_data_to_compare=1
library(PRROC)
n0_p <- n01_p[1]
n1_p <- n01_p[2]
n0_test <- n01_test[1]
n1_test <- n01_test[2]
n_test = n0_test + n1_test
if(is.null(data_input)){
data = generate_data(seed=seed, n01_all=n01_all, data_generation=data_generation)
}else{
data = data_input
if(true_data_to_compare==1){
if(n01_p[1]+n_train_sets[length(n_train_sets)-1]+n01_test[1] > sum(data$y_data==0)){
stop('error: there are not sufficient class 0 input data to run the simulations! Please adjust the parameters.')
}
if(n01_p[2]+n_train_sets[length(n_train_sets)]+n01_test[2] > sum(data$y_data==1)){
stop('error: there are not sufficient class 1 input data to run the simulations! Please adjust the parameters.')
}
}
}
pilot_rest_data = split_data(data$x_data, data$y_data, n0_train=n0_p, n1_train=n1_p, seed=seed)
data
if(is.null(data_input)){
data = generate_data(seed=seed, n01_all=n01_all, data_generation=data_generation)
}else{
data = data_input
if(true_data_to_compare==1){
if(n01_p[1]+n_train_sets[length(n_train_sets)-1]+n01_test[1] > sum(data$y_data==0)){
stop('error: there are not sufficient class 0 input data to run the simulations! Please adjust the parameters.')
}
if(n01_p[2]+n_train_sets[length(n_train_sets)]+n01_test[2] > sum(data$y_data==1)){
stop('error: there are not sufficient class 1 input data to run the simulations! Please adjust the parameters.')
}
}
}
data_input=NULL
if(is.null(data_input)){
data = generate_data(seed=seed, n01_all=n01_all, data_generation=data_generation)
}else{
data = data_input
if(true_data_to_compare==1){
if(n01_p[1]+n_train_sets[length(n_train_sets)-1]+n01_test[1] > sum(data$y_data==0)){
stop('error: there are not sufficient class 0 input data to run the simulations! Please adjust the parameters.')
}
if(n01_p[2]+n_train_sets[length(n_train_sets)]+n01_test[2] > sum(data$y_data==1)){
stop('error: there are not sufficient class 1 input data to run the simulations! Please adjust the parameters.')
}
}
}
pilot_rest_data = split_data(data$x_data, data$y_data, n0_train=n0_p, n1_train=n1_p, seed=seed)
test_y=c(rep(0,n0_test),rep(1,n1_test))
Loop=100
num_of_model = length(model)
number_of_train_sets = length(n_train_sets)/2
dim(n_train_sets) = c(2,number_of_train_sets)
if(true_data_to_compare==0){
auc = array(0,dim=c(length(n_train_sets)/2,Loop,num_of_model))
}else{
auc = array(0,dim=c(length(n_train_sets),Loop,num_of_model))
}
adds=0
L=1
n0_train_max <- max(n_train_sets[1,])
n1_train_max <- max(n_train_sets[2,])
if(test_from_true==0){
if(method == "pca2_mvnorm"){data_list = pilot_tfe_mvnorm_pca2(pilot_rest_data$x_train,pilot_rest_data$y_train,n0_train_max,n1_train_max,n0_test,n1_test)}
if(method == "gaussian_copula"){data_list = pilot_tfe_gaussian_copula(pilot_rest_data$x_train,pilot_rest_data$y_train,n0_train_max,n1_train_max,n0_test,n1_test)}
if(method == "smote"){data_list = pilot_tfe_smote(pilot_rest_data$x_train,pilot_rest_data$y_train,n0_train_max,n1_train_max,n0_test,n1_test)}
if(method == "scDesign2"){data_list = pilot_tfe_scDesign2(pilot_rest_data$x_train,pilot_rest_data$y_train,n0_train_max,n1_train_max,n0_test,n1_test)}
}else if(test_from_true==1){
train_test_data = split_data(data$x_data, data$y_data, n0_train=n0_train_max, n1_train=n1_train_max, n0_test=n0_test, n1_test=n1_test)
if(method == "pca2_mvnorm"){data_list = pilot_pca2(train_test_data$x_train,train_test_data$y_train,train_test_data$x_test)}
if(method == "gaussian_copula"){data_list = pilot_n(train_test_data$x_train,train_test_data$y_train,train_test_data$x_test)}
if(method == "smote"){data_list = pilot_n(train_test_data$x_train,train_test_data$y_train,train_test_data$x_test)}
if(method == "scDesign2"){data_list = pilot_pca2(train_test_data$x_train,train_test_data$y_train,train_test_data$x_test)}
}
test_from_true=1
test_from_true=0
if(test_from_true==0){
if(method == "pca2_mvnorm"){data_list = pilot_tfe_mvnorm_pca2(pilot_rest_data$x_train,pilot_rest_data$y_train,n0_train_max,n1_train_max,n0_test,n1_test)}
if(method == "gaussian_copula"){data_list = pilot_tfe_gaussian_copula(pilot_rest_data$x_train,pilot_rest_data$y_train,n0_train_max,n1_train_max,n0_test,n1_test)}
if(method == "smote"){data_list = pilot_tfe_smote(pilot_rest_data$x_train,pilot_rest_data$y_train,n0_train_max,n1_train_max,n0_test,n1_test)}
if(method == "scDesign2"){data_list = pilot_tfe_scDesign2(pilot_rest_data$x_train,pilot_rest_data$y_train,n0_train_max,n1_train_max,n0_test,n1_test)}
}else if(test_from_true==1){
train_test_data = split_data(data$x_data, data$y_data, n0_train=n0_train_max, n1_train=n1_train_max, n0_test=n0_test, n1_test=n1_test)
if(method == "pca2_mvnorm"){data_list = pilot_pca2(train_test_data$x_train,train_test_data$y_train,train_test_data$x_test)}
if(method == "gaussian_copula"){data_list = pilot_n(train_test_data$x_train,train_test_data$y_train,train_test_data$x_test)}
if(method == "smote"){data_list = pilot_n(train_test_data$x_train,train_test_data$y_train,train_test_data$x_test)}
if(method == "scDesign2"){data_list = pilot_pca2(train_test_data$x_train,train_test_data$y_train,train_test_data$x_test)}
}
p <- array(0,dim=c(Loop,n_test,num_of_model))
# matrix(0,Loop,n_test)
for (i in 1:number_of_train_sets)
{
n0_train <- n_train_sets[1,i]
n1_train <- n_train_sets[2,i]
data_list_ds = downsample_data(data_list, n0_train = n0_train, n1_train = n1_train, seed = seed)
result = get_p_result(data_list=data_list_ds, model=model, func=func)
for(j in 1:num_of_model){
p[i,,j] = result[j,]
}
cat(L,i+adds,"\n")
}
p
p <- array(0,dim=c(number_of_train_sets,n_test,num_of_model))
# matrix(0,Loop,n_test)
for (i in 1:number_of_train_sets)
{
n0_train <- n_train_sets[1,i]
n1_train <- n_train_sets[2,i]
data_list_ds = downsample_data(data_list, n0_train = n0_train, n1_train = n1_train, seed = seed)
result = get_p_result(data_list=data_list_ds, model=model, func=func)
for(j in 1:num_of_model){
p[i,,j] = result[j,]
}
cat(L,i+adds,"\n")
}
k=1
j=1
index0_test=which(test_y==0)
index1_test=which(test_y==1)
score = p[i,,j]
roc <- roc.curve(scores.class0 =score[index1_test],scores.class1=score[index0_test],curve =FALSE)
roc$auc
auc
auc[k+adds,L,j]=roc$auc
auc
j=2
score = p[i,,j]
roc <- roc.curve(scores.class0 =score[index1_test],scores.class1=score[index0_test],curve =FALSE)
auc[k+adds,L,j]=roc$auc
auc
auc[1,,1]
auc[,,1]
auc[,1,1]
auc[,1,2]
j=1
k=2
score = p[i,,j]
roc <- roc.curve(scores.class0 =score[index1_test],scores.class1=score[index0_test],curve =FALSE)
auc[k+adds,L,j]=roc$auc
auc
p[i,,j]
library(SSD)
AUC = calculate_AUC_base(n01_all = c(800, 800), n01_p = c(15, 15), n01_test = c(300,
300), n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120, 120), c(150, 150)),
seed = 1, model = c("svm", "randomforest"))
AUC
calculate_AUCs(n01_all = c(800, 800), n01_p = c(15, 15),
n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120,
120), c(150, 150)), n01_test = c(300, 300), num_of_seeds = 20,
random_seeds = FALSE, calculate_std_of_AUC_and_produce_plot = TRUE,
data_generation = list(dist = "t-distribution", sigma = list(class_0 = diag(5),
class_1 = diag(5)), df = c(10, 10), delta = c(rep(0,
5), rep(2, 5))), true_data_to_compare = 1)
require(SSD)
Sys.time()
calculate_AUCs(n01_all = c(800, 800), n01_p = c(15, 15),
n_train_sets = c(c(15, 15), c(30, 30), c(60, 60), c(120,
120), c(150, 150)), n01_test = c(300, 300), num_of_seeds = 20,
random_seeds = FALSE, calculate_std_of_AUC_and_produce_plot = TRUE,
data_generation = list(dist = "t-distribution", sigma = list(class_0 = diag(5),
class_1 = diag(5)), df = c(10, 10), delta = c(rep(0,
5), rep(2, 5))), true_data_to_compare = 1)
Sys.time()
Sys.time()
yeast_data <- read.table("./yeast.data")
###https://archive.ics.uci.edu/ml/datasets/Diabetic+Retinopathy+Debrecen+Data+Set
x_data = yeast_data[,c(2:5,8:9)]
y_label = yeast_data[,10]
id0 = which(y_label=="CYT" | y_label=="MIT")
y_data = rep(1,length(y_label))
y_data[id0] = 0
table(y_data)
data = list(x_data=x_data, y_data=y_data)
calculate_AUCs(n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", model=c("svm","randomforest"), data_input=data)
Sys.time()
library(SSD)
Sys.time()
yeast_data <- read.table("./yeast.data")
###https://archive.ics.uci.edu/ml/datasets/Diabetic+Retinopathy+Debrecen+Data+Set
x_data = yeast_data[,c(2:5,8:9)]
y_label = yeast_data[,10]
id0 = which(y_label=="CYT" | y_label=="MIT")
y_data = rep(1,length(y_label))
y_data[id0] = 0
table(y_data)
data = list(x_data=x_data, y_data=y_data)
res = calculate_AUCs(n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", model=c("svm","randomforest"), data_input=data)
Sys.time()
